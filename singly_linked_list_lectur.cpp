#include <iostream>
 
using namespace std;
 
 
/* класс односвязаного списка - динамической структуры данных, в которой каждый элемент списка хранится
в отдельной памяти. Для связи элементов списка необходимо вместе с элементом хранить информацию о местоположении
(указателе) следующего элемента списка*/
 
class List
{
    // структуру хранения размещаем внутри класса List, чтобы во-первых иметь возможность работать с данными узла списка напрямую,
    // во-вторых, поскольку таким образом структура узла списка будет скрыта от внешнего использования, так как
    // структура узла предназначена специально для реализации односвязного списка
    struct Node
    {
        int info;
        Node* next;
        Node(int info, Node*next=NULL)
        {this->info=info; this->next=next;} 
    };
    
    // доступ ко всем элементам списка доступен через его первый элемент - заголовок списка
    Node*head;
    
    public:
    List();
    ~List();
    void Add(int info, int position);
    void Remove(int position);
    void Print();
    
    private:
    void RemoveNode(Node*& node);
};
 
// вспомогательная функция для удаления узла - private, так как раскрывает структуру хранения (доступ к Node)
// адрес удаляемого узла передается как параметр
// параметр передается по ссылке - т.е. в переменную, хранящую адрес удаляемого узла, можно записать адрес другого узла
void List::RemoveNode(Node*& node)
{
    Node* help=node;
    node=node->next;
    delete help;
}
 
// конструктор списка только инициализирует заголовок, указывая, что список будет пустым
List::List()
{
    head=NULL;
}
 
// деструктор должен уничтожить все элементы списка
List::~List()
{
    // уничтожать будем каждый раз первый элемент списка, пока список не опустеет
    while(head!=NULL)
    {
        // требуется доступ к двум соседним элементам, чтобы уничтожить узел и не потерять тот, что следовал за ним
       /* Node* help=head;
        head=head->next;
        delete help;
        */
        RemoveNode(head);
    }
}
 
// метод добавления информации в список на заданную позицию
void List::Add(int info, int position)
{
     // если добавляется новый первый элемент, то требуется отдельная обработка, так как может измениться head
    if(position==0)
    {
        head=new Node(info,head);
        return;
    }
    // обработка нереальной позиции - отрицательный номер элемента
    if(position<0) throw 1;
    
    // для добавления элементов требуется проход по списку до элемента с номером position-1
    Node*cur=head;
    int i=0;
    // либо будет достигнут элемент с позицией position-1, либо будет достигнут конец списка
    while(i!=position-1 && cur!=NULL)
    {
        i++; cur=cur->next;
    }
    // если сначала закончился список, позиция добавления тоже неверная
    if(cur==NULL) throw 1;
    // подцепляем элемент как следующий за текущим (cur)
    cur->next=new Node(info, cur->next);    
}
 
// метод удаления элемента с заданной позиции
void List::Remove(int position)
{
    // из пустого списка удалить ничего нельзя
    if(head==NULL) throw 1;
    // если удаляется первый элемент, то требуется отдельная обработка, так как изменяется head
    if(position==0)
    {
        RemoveNode(head);
        return;
    }
    // обработка нереальной позиции - отрицательный номер элемента
    if(position<0) throw 1;
    
    // для удаления элементов требуется проход по списку до элемента с номером position-1
    Node*cur=head;
    int i=0;
    // либо будет достигнут элемент с позицией position-1, либо будет достигнут последний элемент списка (после него ничего нет)
    while(i!=position-1 && cur->next!=NULL)
    {
        i++; cur=cur->next;
    }
    // если сначала закончился список, позиция удаления тоже неверная
    if(cur->next==NULL) throw 1;
    // удаляем найденный элемент
    RemoveNode(cur->next);
}
 
// печать элементов списка
void List::Print()
{
    cout<<"(";
    for(Node*cur=head; cur!=NULL; cur=cur->next)
        cout<<(cur->info)<<" ";
    cout<<")"<<endl;
}
 
int main()
{
    List list;
    for(int i=0;i<5;i++)
        list.Add(i,i);
    list.Print();
    list.Add(100,0);
    list.Add(500,6);
    list.Add(1000,3);
    list.Print();
    list.Remove(0);
    list.Print();
    list.Remove(6);
    list.Print();
    list.Remove(3);
    list.Print();
 
    return 0;
}
 
 


